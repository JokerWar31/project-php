<?php
function createOrderWithTickets($event_id, $user_id, $event_date, $tickets) {
    $mysqli = new mysqli("localhost", "username", "password", "database");

    if ($mysqli->connect_error) {
        die("Connection failed: " . $mysqli->connect_error);
    }

    $equal_price = 0;
    $created = date('Y-m-d H:i:s');

    // Вставка нового заказа
    $stmt = $mysqli->prepare("INSERT INTO orders (event_id, user_id, equal_price, created) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("isis", $event_id, $user_id, $equal_price, $created);

    if (!$stmt->execute()) {
        echo "Error: " . $stmt->error;
        return;
    }

    $order_id = $stmt->insert_id;
    $stmt->close();

    // Обработка каждого билета
    foreach ($tickets as $ticket_type => $details) {
        for ($i = 0; $i < $details['quantity']; $i++) {
            $barcode = generateRandomBarcode();
            $equal_price += $details['price'];

            // Вставка каждого билета
            $stmt = $mysqli->prepare("INSERT INTO tickets (order_id, barcode, ticket_type, price, event_date, created) VALUES (?, ?, ?, ?, ?, ?)");
            $stmt->bind_param("ississ", $order_id, $barcode, $ticket_type, $details['price'], $event_date, $created);
            $stmt->execute();
            $stmt->close();
        }
    }

    // Обновление общей стоимости заказа
    $stmt = $mysqli->prepare("UPDATE orders SET equal_price = ? WHERE id = ?");
    $stmt->bind_param("ii", $equal_price, $order_id);
    $stmt->execute();
    $stmt->close();

    echo "Order and tickets created successfully with Order ID: " . $order_id;
    $mysqli->close();
}

function generateRandomBarcode($length = 8) {
    return substr(str_shuffle("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, $length);
}

// Пример вызова функции
$tickets = [
    'adult' => ['price' => 700, 'quantity' => 2],
    'kid' => ['price' => 450, 'quantity' => 3],
    'discounted' => ['price' => 350, 'quantity' => 4]
];

createOrderWithTickets(3, '00451', '2021-08-21 13:00:00', $tickets);
?>
Объяснение решения:
Таблица orders хранит общую информацию о заказе, в то время как подробности о каждом билете хранятся в новой таблице tickets.
Таблица tickets позволяет каждому билету иметь уникальный штрих-код (barcode), что позволяет проверять их независимо. Это также облегчает управление различными типами билетов, так как каждый билет теперь имеет свой собственный уникальный записанный тип и цену.
Код на PHP обрабатывает транзакции таким образом, чтобы добавлять записи в обе таблицы последовательно, обеспечивая целостность данных и поддерживая целевые связи между заказами и билетами.
Генерация баркодов в PHP коде происходит через функцию generateRandomBarcode(), генерирующую случайные штрих-коды для каждого билета.
